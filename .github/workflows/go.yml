name: Docker build and local releases

on: [push, pull_request]

jobs:
  test: #Run this testing only for feature branches
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        
      - name: Build and test code 
        run: go test -v ./...

  go-build:
    name: Build Binary and Release
    if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        name: [windows-amd64.exe, darwin-amd64, linux-amd64, linux-arm64, linux-arm]
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      id: go

    - name: Check out code into the Go module directory
      if: success()
      uses: actions/checkout@v2

    - name: Cross Compile go
      if: success()
      run: curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/go/go-build.sh | bash
      env:
        VERSION: ${{github.ref}}
        BUILDNUM: ${{github.run_number}}
        NAME: thing-directory
    
    - name: Create DEB for Debian
      if: success()
      run: ls .

    - name: Create Release
      if: success()
      id: nightly_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{github.ref}}
        release_name: Nightly from ${{github.ref}}
        body: This is a nightly release. It may be not working properly.
        draft: false
        prerelease: true

    - name: Upload release asset ${{ matrix.name }}
        uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.nightly_release.outputs.upload_url }}
        asset_path: bin/thing-directory-${{ matrix.name }}
        asset_name: thing-directory-${{ matrix.name }}
        asset_content_type: application/octet-stream

    - name: Upload release asset sample_conf
      if: success()
      id: upload-release-asset-sample_conf
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.nightly_release.outputs.upload_url }}
        asset_path: sample_conf/thing-directory.json
        asset_name: thing-directory.json
        asset_content_type: application/json

  docker:
    name: Build Docker and Publish
    if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    steps: 
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2



#    - name: Get dependencies
#      run: |
#        go get -v -t -d ./...
#        if [ -f Gopkg.toml ]; then
#            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#            dep ensure
#        fi
#
#    - name: Build
#      run: go build -v .
#
#    - name: Test
#      run: go test -v .

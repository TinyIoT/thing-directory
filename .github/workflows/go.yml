name: Docker build and local releases

on: [push, pull_request]

jobs:
  go-build: #Run this testing only for feature branches
    name: Test and build the code
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Variables
        id: prepare_var
        run: |
          versions=(${GREF//\// })
          echo ::set-output name=version_nr::${versions[2]}
          echo ::set-output name=programname::$NAME
        env:
          GREF: ${{github.ref}}
          NAME: thing-directory

      - name: Set up Go 1.x
        if: success()
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code
        if: success()
        uses: actions/checkout@v2
        
      - name: Test code
        if: success()
        run: go test -v ./...

      - name: Cross Compile go
        if: success()
        run: curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/go/go-build.sh | bash
        env:
          VERSION: ${{ steps.prepare_var.outputs.version_nr }}
          BUILDNUM: ${{github.run_number}}
          NAME: ${{ steps.prepare_var.outputs.programname }}

      - name: Upload binary result for job go-build
        uses: actions/upload-artifact@v2
        with: 
          name: go-binary
          path: bin/

      - name: Upload config result for job go-build
        uses: actions/upload-artifact@v2
        with: 
          name: sample_conf
          path: sample_conf/

      - name: Upload wot result for job go-build
        uses: actions/upload-artifact@v2
        with: 
          name: wot
          path: wot/wot_td_schema.json

  go-build:
    name: Build Binary and Release
    if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    steps:

      - name: Prepare Variables
        id: prepare_var
        run: |
          versions=(${GREF//\// })
          echo ::set-output name=version_nr::${versions[2]}
          echo ::set-output name=programname::$NAME
        env:
          GREF: ${{github.ref}}
          NAME: thing-directory

      - name: Download binary artifact
        uses: actions/download-artifact@v2
        with: 
          name: go-binary

      - name: list
        run: ls -R

      - name: Create DEB for Debian amd64
        id: deb-linux-amd64
        if: success()
        run: |
          exit 1
          mkdir dpkg
          cd dpkg
          mkdir Builds
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/control-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/pre-post-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/service-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/logrotate-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/build-deb.sh | bash
        env: 
          NAME: ${{ steps.prepare_var.outputs.programname }}
          PLATFORM: amd64
          DEPENDENCIES: libc-bin (>= 2.19)
          MAINAINER: Linksmart <dev@linksmart.net>
          DESCRIPTION: Discovers Things
          DEBBUILDPATH: $HOME/deb
          VERSION: ${{ steps.prepare_var.outputs.version_nr }}
          EXEPATH: thing-directory-linux-amd64
          EXEARGUMENTS: --conf /etc/thing-directory/thing-directory.json --schema /etc/thing-directory/wot_td_schema.json
          COPYEXEC: ../bin/thing-directory-linux-amd64
          COPYCONFIG: ../sample_conf/thing-directory.json ../wot/wot_td_schema.json

      - name: Upload deb artifact
        uses: actions/upload-artifact@v1
        with:
          name: test2.deb
          path: dpkg/Builds/${{ steps.deb-linux-amd64.outputs.debuilderfile }}

      - name: Create Release
        if: success()
        id: nightly_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_var.outputs.version_nr }}
          release_name: Nightly ${{ steps.prepare_var.outputs.version_nr }}
          body: This is a nightly release. It may be not working properly.
          draft: false
          prerelease: true

      - name: Upload release asset windows-amd64.exe
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.nightly_release.outputs.upload_url }}
          asset_path: bin/thing-directory-windows-amd64.exe
          asset_name: thing-directory-windows-amd64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload release asset darwin-amd64
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.nightly_release.outputs.upload_url }}
          asset_path: bin/thing-directory-darwin-amd64
          asset_name: thing-directory-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload release asset linux-amd64
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.nightly_release.outputs.upload_url }}
          asset_path: bin/thing-directory-linux-amd64
          asset_name: thing-directory-linux-amd64
          asset_content_type: application/octet-stream
      
      - name: Upload release asset linux-arm64
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.nightly_release.outputs.upload_url }}
          asset_path: bin/thing-directory-linux-arm64
          asset_name: thing-directory-linux-arm64
          asset_content_type: application/octet-stream

      - name: Upload release asset linux-arm
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.nightly_release.outputs.upload_url }}
          asset_path: bin/thing-directory-linux-arm
          asset_name: thing-directory-linux-arm
          asset_content_type: application/octet-stream

      - name: Upload release asset sample_conf
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.nightly_release.outputs.upload_url }}
          asset_path: sample_conf/thing-directory.json
          asset_name: thing-directory.json
          asset_content_type: application/json

  docker:
    name: Build Docker and Publish
    if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    steps: 
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2



#    - name: Get dependencies
#      run: |
#        go get -v -t -d ./...
#        if [ -f Gopkg.toml ]; then
#            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#            dep ensure
#        fi
#
#    - name: Build
#      run: go build -v .
#
#    - name: Test
#      run: go test -v .
